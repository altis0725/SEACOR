from abc import ABC, abstractmethod
from typing import Any, Dict

class Tool(ABC):
    """
    ExpertAgentによって使用されるすべてのツールの基本クラス。
    """

    def __init__(self, config: Dict[str, Any]):
        """
        与えられた設定でツールを初期化します。

        引数:
            config: ツールの設定パラメータ。
        """
        self.config = config

    @property
    @abstractmethod
    def name(self) -> str:
        """
        ツールの一意の名前識別子。
        """
        pass

    @abstractmethod
    def run(self, input: str, **kwargs) -> Any:
        """
        ツールの同期実行。

        引数:
            input: ツールが処理する入力文字列またはデータ。

        戻り値:
            ツール実行の結果。
        """
        pass

    @abstractmethod
    async def arun(self, input: str, **kwargs) -> Any:
        """
        ツールの非同期実行。

        引数:
            input: ツールが処理する入力文字列またはデータ。

        戻り値:
            ツール実行の結果。
        """
        pass

class WebSearchTool(Tool):
    """
    ウェブ検索操作を実行するためのツール。
    """

    @property
    def name(self) -> str:
        return "web_search"

    def run(self, query: str, **kwargs) -> str:
        """
        同期的にウェブ検索を実行します。
        """
        raise NotImplementedError("WebSearchTool.runは実装されていません")

    async def arun(self, query: str, **kwargs) -> str:
        """
        非同期的にウェブ検索を実行します。
        """
        return self.run(query, **kwargs)

class CodeAnalysisTool(Tool):
    """
    コード分析操作を実行するためのツール。
    """

    @property
    def name(self) -> str:
        return "code_analysis"

    def run(self, code: str, **kwargs) -> str:
        """
        同期的にコードを分析します。
        """
        raise NotImplementedError("CodeAnalysisTool.runは実装されていません")

    async def arun(self, code: str, **kwargs) -> str:
        """
        非同期的にコードを分析します。
        """
        return self.run(code, **kwargs)
